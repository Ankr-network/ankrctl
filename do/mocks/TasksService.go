// Code generated by mockery v1.0.0. DO NOT EDIT.

// Generated: please do not edit by hand

package mocks

import do "github.com/Ankr-network/dccn-cli/do"
import godo "github.com/Ankr-network/godo"
import mock "github.com/stretchr/testify/mock"

// TasksService is an autogenerated mock type for the TasksService type
type TasksService struct {
	mock.Mock
}

// Actions provides a mock function with given fields: _a0
func (_m *TasksService) Actions(_a0 int) (do.Actions, error) {
	ret := _m.Called(_a0)

	var r0 do.Actions
	if rf, ok := ret.Get(0).(func(int) do.Actions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Actions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backups provides a mock function with given fields: _a0
func (_m *TasksService) Backups(_a0 int) (do.Images, error) {
	ret := _m.Called(_a0)

	var r0 do.Images
	if rf, ok := ret.Get(0).(func(int) do.Images); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Images)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TasksService) Create(_a0 *godo.TaskCreateRequest, _a1 bool) (*do.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *do.Task
	if rf, ok := ret.Get(0).(func(*godo.TaskCreateRequest, bool) *do.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*godo.TaskCreateRequest, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiple provides a mock function with given fields: _a0
func (_m *TasksService) CreateMultiple(_a0 *godo.TaskMultiCreateRequest) (do.Tasks, error) {
	ret := _m.Called(_a0)

	var r0 do.Tasks
	if rf, ok := ret.Get(0).(func(*godo.TaskMultiCreateRequest) do.Tasks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*godo.TaskMultiCreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *TasksService) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByTag provides a mock function with given fields: _a0
func (_m *TasksService) DeleteByTag(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *TasksService) Get(_a0 int) (*do.Task, error) {
	ret := _m.Called(_a0)

	var r0 *do.Task
	if rf, ok := ret.Get(0).(func(int) *do.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kernels provides a mock function with given fields: _a0
func (_m *TasksService) Kernels(_a0 int) (do.Kernels, error) {
	ret := _m.Called(_a0)

	var r0 do.Kernels
	if rf, ok := ret.Get(0).(func(int) do.Kernels); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Kernels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *TasksService) List() (do.Tasks, error) {
	ret := _m.Called()

	var r0 do.Tasks
	if rf, ok := ret.Get(0).(func() do.Tasks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByTag provides a mock function with given fields: _a0
func (_m *TasksService) ListByTag(_a0 string) (do.Tasks, error) {
	ret := _m.Called(_a0)

	var r0 do.Tasks
	if rf, ok := ret.Get(0).(func(string) do.Tasks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Neighbors provides a mock function with given fields: _a0
func (_m *TasksService) Neighbors(_a0 int) (do.Tasks, error) {
	ret := _m.Called(_a0)

	var r0 do.Tasks
	if rf, ok := ret.Get(0).(func(int) do.Tasks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Snapshots provides a mock function with given fields: _a0
func (_m *TasksService) Snapshots(_a0 int) (do.Images, error) {
	ret := _m.Called(_a0)

	var r0 do.Images
	if rf, ok := ret.Get(0).(func(int) do.Images); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Images)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
